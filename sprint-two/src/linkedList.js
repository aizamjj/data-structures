var LinkedList = function() {
  var list = {};
  list.head = null;
  list.tail = null;

  list.addToTail = function(value) {
    // create a new instance of node object and assign it to newNode variable
    var newNode = Node(value);

    // if the list is empty
    if (list.head === null) {
      // current newNode is the tail
      list.tail = newNode;
      // current newNode is the head
      list.head = newNode;
    } else {
    // the current tail's next value must be pointed to the newly added Node
      list.tail.next = newNode;
      // the tail now points at the newNode
      list.tail = newNode;
    }
  };

  list.removeHead = function() {
    // access the current head and save it to oldhead variable
    var oldHead = list.head.value;
    // the new head is now the next value of the deleted oldHead
    list.head = list.head.next;
    // return the oldHead
    return oldHead;
  };

  list.contains = function(target) {
    // create a recursive helper function that takes a node
    var recurse = function(node) {
      // if the node contains the target value, return true
      if (node.value === target) {
        return true;
      }
      //if the node is the tail return false, more often than not node will be list.head
      if (node === list.tail) {
        return false;
      }
      // return the recursion function with the next node
      return recurse(node.next);
    };
    // return the output generated by the recursion helper function
    return recurse(list.head);

  };

  return list;
};

var Node = function(value) {
  var node = {};

  node.value = value;
  node.next = null;

  return node;
};

/*
 * Complexity: What is the time complexity of the above functions?
 */
